<?php

/**
 * @file
 * DocBooks are Books that can be exported into DocBook/XML format.
 * It is also possible to import simple DocBook documents and
 * to convert Books to DocBooks.
 */

/**
 * Implements hook_help().
 */
function first_help($path, $arg) {
  if ($path == 'admin/help#first') {
    return t('A demonstration module.');
  }
}

/**
 * Implements hook_menu().
 */
/*
function docbook_menu() {
  $items['admin/content/docbook'] = array(
    'title' => 'DocBooks',
    'description' => "Manage your site's book outlines.",
    'page callback' => 'book_admin_overview',
    'access arguments' => array('administer book outlines'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'docbook.admin.inc',
  );
  return $items
}
*/


/**
 * Implements hook_node_view().
 */
function docbook_node_view($node, $view_mode) {
  if ($view_mode != 'rss') {
    docbook_node_view_link($node, $view_mode);
  }
}


/**
 * Adds relevant docbook links to the node's links.
 *
 * @param $node
 *   The book page node to add links to.
 * @param $view_mode
 *   The view mode of the node.
 */
function docbook_node_view_link($node, $view_mode) {
  $links = array();

  // the link for adding a 'book' child will be replaced
  // by the link for adding a 'docbook-section' child
  unset($node->content['links']['book']['#links']['book_add_child']);

  if (isset($node->book['depth'])) {
    if ($view_mode == 'full' && node_is_page($node)) {
      $child_type = variable_get('docbook_child_type', 'docbook_section');
      if ((user_access('add content to books') || user_access('administer book outlines')) && node_access('create', $child_type) && $node->status == 1 && $node->book['depth'] < MENU_MAX_DEPTH) {
        $links['docbook_add_child'] = array(
          'title' => t('Add child page'),
          'href' => 'node/add/' . str_replace('_', '-', $child_type),
          'query' => array('parent' => $node->book['mlid']),
        );
      }

      if (user_access('access printer-friendly version')) {
        $links['docbook_printer'] = array(
          'title' => t('Export XML/DocBook version'),
          'href' => 'book/export/docbook/' . $node->nid,
          'attributes' => array('title' => t('Exports an XML/DocBook version of this book page and its sub-pages.'))
        );
      }
    }
  }

  if (!empty($links)) {
    $node->content['links']['docbook'] = array(
      '#theme' => 'links__node__docbook',
      '#links' => $links,
      '#attributes' => array('class' => array('links', 'inline')),
    );
  }
}


/**
 * Implements hook_element_info_alter().
 *
 * Sets the text format processor to a custom callback function.
 * This code is taken from: http://drupal.org/node/1003262#comment-4879140
 * See also this: http://drupal.stackexchange.com/questions/16036/set-a-default-text-format-per-content-type-in-drupal-7
 */
function docbook_element_info_alter(&$type) {
  if (isset($type['text_format']['#process'])) {
    foreach ($type['text_format']['#process'] as &$callback) {
      if ($callback === 'filter_process_format') {
        $callback = 'docbook_filter_process_format';
      }
    }
  }
}

/**
 * Callback for docbook_element_info_alter().
 */
function docbook_filter_process_format($element) {
  $element = filter_process_format($element);
  // Change the default text format of the field
  // 'field_dbw_content' to 'DocBookWiki'.
  if ($element['#bundle'] == 'docbook_section' && $element['#field_name'] == 'field_dbw_content') {
    $element['format']['format']['#default_value'] = 'docbookwiki';
  }
  return $element;
}


/**
 * Generates DocBook for export when invoked by book_export().
 *
 * @param $nid
 *   An integer representing the node id (nid) of the node to export.
 *
 * @return
 *   A string containing DocBook representing the node and its children.
 */
function book_export_docbook($nid) {
  if (!user_access('access printer-friendly version')) {
    drupal_access_denied();
    return;
  }

  $node = node_load($nid);
  if (!isset($node->book)) {
    drupal_not_found();
    return;
  }
  //print '<xmp>'; print_r($node); print '</xmp>';  exit(0);  //debug

  $id = $node->field_dbw_id['und'][0]['value'];
  $tree = book_menu_subtree_data($node->book);

  $depth = $node->book['depth'];
  if ($depth > 1) {  //exporting a section
    $xml_content = book_export_traverse($tree, 'docbook_node_export');
    $docbook = <<<EOD
<?xml version="1.0" encoding="utf-8" standalone="no"?>

$xml_content
EOD;
  }
  else {    //exporting an article or a book
    $tree = array_values($tree);
    $sections = $tree[0]['below'];
    $contents = book_export_traverse($sections, 'docbook_node_export');

    $info = docbook_info_export($node);

    $doctype = $node->field_dbw_doctype['und'][0]['value'];
    $title = $node->title;

    $docbook = <<<EOD
<?xml version="1.0" encoding="utf-8" standalone="no"?>

<!DOCTYPE $docype PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
          "http://docbook.org/xml/4.5/docbookx.dtd">

<$doctype id='$id'>
  <title>$title</title>
  $info
  $contents
</$doctype>
EOD;
  }

  header('Content-Type: application/docbook+xml; charset=utf-8');
  header('Content-Disposition: attachment; filename="' . $id . '.xml"');
  return $docbook;
}

function docbook_info_export($node) {
  //print '<xmp>'; print_r($node); print '</xmp>';  exit(0);  //debug

  $file = drupal_get_path('module', 'dbwiki') . "/converter/class.Info.php";
  include_once $file;
  $info = new Info;

  if (isset($node->field_dbw_abstract['und'])) {
    $abstract = $node->field_dbw_abstract['und'][0]['value'];
    $info->abstract = trim($abstract);
  }

  if (isset($node->field_dbw_copyright['und'])) {
    $copyright = $node->field_dbw_copyright['und'][0]['value'];
    $info->copyright = trim($copyright);
  }

  if (isset($node->field_dbw_release['und'])) {
    $release = $node->field_dbw_release['und'][0]['value'];
    $info->release = trim($release);
  }

  if (isset($node->field_dbw_date['und'])) {
    $date = $node->field_dbw_date['und'][0]['value'];
    $info->date = trim($date);
  }

  if (isset($node->field_dbw_keywords['und'])) {
    $keywords = $node->field_dbw_keywords['und'];
    foreach ($keywords as $keyword) {
      $term = taxonomy_term_load($keyword['tid']);
      $info->keywords[] = $term->name;
    }
  }

  if (isset($node->field_dbw_author['und'])) {
    $authors = $node->field_dbw_author['und'];
    foreach ($authors as $author) {
      $info->parse_author($author['value']);
    }
  }

  return $info->to_xml();
}

/**
 * Generates DocBook for a node.
 *
 * @param $node
 *   The node that will be output.
 * @param $children
 *   (optional) All the rendered child nodes within the current node.
 *   Defaults to an empty string.
 *
 * @return
 *   The DocBook generated for the given node.
 *
 * @see book_export_traverse()
 */
function docbook_node_export($node, $children = '') {
  //print '<xmp>'; print_r($node); print '</xmp>'; exit(0); //debug

  $file = drupal_get_path('module', 'dbwiki') . "/converter/package.WikiConverter.php";
  include_once $file;

  $parser = new WikiParser;
  $dbw_content = $node->field_dbw_content['und'][0]['value'];
  $tpl = $parser->parse_string($dbw_content);

  $indent = '';
  $depth = $node->book['depth'];
  while ($depth > 0) {
    $indent .= '  ';
    $depth -= 1;
  }
  $xml_content = $tpl->to_xml($indent);
  if (trim($xml_content)=='')  $xml_content = '<para/>';

  $section = $node->field_dbw_sectype['und'][0]['value'];
  $id = $node->field_dbw_id['und'][0]['value'];
  $title = $node->title;

  $element = "
$indent<$section id='$id'>
$indent  <title>$title</title>
$indent  $xml_content
$indent  $children
$indent</$section>
";

  return $element;
}
